"use strict";
/*!
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const logging_1 = require("@google-cloud/logging");
const google_auth_library_1 = require("google-auth-library");
const winston = require("winston");
const common_1 = require("../common");
const index_1 = require("../index");
const make_child_logger_1 = require("./make-child-logger");
exports.APP_LOG_SUFFIX = 'applog';
async function middleware(options) {
    const defaultOptions = {
        logName: 'winston_log',
        level: 'info',
        levels: winston.config.syslog.levels,
    };
    options = Object.assign({}, defaultOptions, options);
    const loggingWinstonApp = new index_1.LoggingWinston(Object.assign({}, options, { logName: `${options.logName}_${exports.APP_LOG_SUFFIX}` }));
    const logger = winston.createLogger({
        level: options.level,
        levels: options.levels,
        transports: [loggingWinstonApp],
    });
    const auth = loggingWinstonApp.common.stackdriverLog.logging.auth;
    const [env, projectId] = await Promise.all([
        auth.getEnv(),
        auth.getProjectId(),
    ]);
    // Unless we are running on Google App Engine or Cloud Functions, generate a
    // parent request log entry that all the request specific logs ("app logs")
    // will nest under. GAE and GCF generate the parent request logs
    // automatically.
    let emitRequestLog;
    if (env !== google_auth_library_1.GCPEnv.APP_ENGINE && env !== google_auth_library_1.GCPEnv.CLOUD_FUNCTIONS) {
        const loggingWinstonReq = new index_1.LoggingWinston(options);
        const requestLogger = winston.createLogger({
            level: options.level,
            levels: options.levels,
            transports: [loggingWinstonReq],
        });
        emitRequestLog = (httpRequest, trace) => {
            requestLogger.info({
                [common_1.LOGGING_TRACE_KEY]: trace,
                httpRequest,
                message: httpRequest.requestUrl || 'http request',
            });
        };
    }
    return {
        logger,
        mw: logging_1.middleware.express.makeMiddleware(projectId, (trace) => {
            return make_child_logger_1.makeChildLogger(logger, trace);
        }, emitRequestLog),
    };
}
exports.middleware = middleware;
//# sourceMappingURL=express.js.map